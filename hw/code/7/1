#!/usr/bin/python -b

from __future__ import division

import math,random
import time,timeit,sys
import copy
printList=[]
counter=0
def energy(de1,de_min,de_max):
	local1,local2=de1.objectiveScore()
	norm1=(local1-de_min)/(de_max-de_min)
	norm2=(local2min-de_min)/(de_max-de_min)	
	bump1=(1-norm1)
	bump2=(1-norm2)
	energy1=1-(math.sqrt(bump1**2+bump2**2)/1.414)
	return energy1

def generateSolution(de1,de_min,de_max,best):
	solutionList=[]
	for i in range(100):
		new1=copy.deepcopy(de1)
      		local1,local2 = can.objectiveScore()
      		if local1 < de_min:
        		de_min=local1
      		if local1 > de_max:
        		de_max=local1
      		if local2<de_min:
			de_min=local2
        	if local2>de_max:
			de_max=local2
		solutionlist.append(new1)
		if (energy(new1,de_min,de_max)>best.energy()):
			best=copy.deepcopy(new)
	return (solutionList,best,de_min,de_max)

def candidates(solutionList,currentSolution):
	returnList=[]
	x=solutionList.index(currentSolution)
	newList=solutionList.pop(x)
	for i in range(newList):
		if ((newList[i] not in solutionList) and len(newList)<3):
			returnList.append(newList[i])
		if (len(returnList)==3):
			return returnList

def DEv(de1):
	print "Differential Evolution Called"
	candidates=100
	change=0.1
	epl=0.75
	crsovr = 0.3
	trials=10
	n=de1()
	best=de1()
	best=copy.deepcopy(n)
	de_min,de_max=best.baseline()
	
	for i in range(trials):
		newList=[]
		returnList=[]
		any1=de1()
		new_list,de_min,de_max,best=generateSolution(any1,de_min,de_max,best)
		for k in newList:
			returnList=candidates(newList,k)
			index=random.randint(0,len(i.decisionList))
			deSol=de1()			
			for l in range(len(decisionList)):
				while True:
					flag=False
					x=random.random()
					if (x<crsovr or l==index):
						flag=True
						deSol.decisionList[l]=returnList[0]+(0.75*(returnList[1]-returnList[2]))
					else:
						deSol.decisionList[i]=i.decisonList[i]
				if (deSol.ok()==True):
					break	
        
		if (deSol.eval()<best.eval()):
			best=copy.deepcopy(deSol)
			printList.append('!')
		elif (deSol.eval()<i.eval()):
			printList.append('+')
		else:
			printList.append('.')
		counter=counter+1
		if (counter%50==0):
			print "".join(printList)
			printList=[]
